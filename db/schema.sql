-- =============================================================
-- Layer1 Core Schema (SQL Server)
-- Purpose: Stores users, uploaded resumes & job descriptions,
--          extracted skills/requirements, and match workflow.
-- Notes:
--  * Status columns model lifecycle transitions (see README).
--  * match_jobs is an operational queue entity; matches is the
--    immutable (business) result artifact.
--  * R2 object storage keys stored in storage_path columns.
--  * All timestamps use SYSUTCDATETIME() for consistency.
-- =============================================================

IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'dbo')
BEGIN
    EXEC('CREATE SCHEMA dbo'); -- Ensure dbo schema exists
END;

-- =============================
-- Users: Auth identity linkage
-- =============================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[users]') AND type = N'U')
BEGIN
    CREATE TABLE dbo.users (
        id UNIQUEIDENTIFIER NOT NULL PRIMARY KEY,              -- Application-level UUID
        auth0_sub NVARCHAR(255) NOT NULL UNIQUE,               -- External identity (Auth0 subject)
        email NVARCHAR(255) NULL,                              -- Optional email (may be null if not provided)
        role NVARCHAR(50) NOT NULL DEFAULT 'user',             -- Authorization role (user/admin...)
        created_at DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),-- Creation timestamp (UTC)
        updated_at DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME() -- Last modification timestamp (manually updated in code)
    );
END;

-- =====================================================
-- Resumes: Uploaded candidate resume files + parse data
-- Status lifecycle: uploaded -> queued -> processing -> ready | failed
-- =====================================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[resumes]') AND type = N'U')
BEGIN
    CREATE TABLE dbo.resumes (
        id UNIQUEIDENTIFIER NOT NULL PRIMARY KEY,              -- Resume UUID
        user_id UNIQUEIDENTIFIER NULL,                         -- Owning user (nullable for future public ingest flows)
        filename NVARCHAR(512) NOT NULL,                       -- Original filename
        mime_type NVARCHAR(100) NULL,                          -- Detected MIME type
        storage_path NVARCHAR(1024) NOT NULL,                  -- R2 object key (NOT a filesystem path)
        status NVARCHAR(50) NOT NULL DEFAULT 'uploaded',       -- Processing status (see lifecycle above)
        parsed_summary NVARCHAR(MAX) NULL,                     -- JSON/text summary generated by worker
        created_at DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),-- Insert time
        updated_at DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),-- Last update time
        CONSTRAINT FK_resumes_users FOREIGN KEY (user_id) REFERENCES dbo.users(id)
    );
END;

-- ==================================================================
-- Job Descriptions: Uploaded or raw pasted job postings & parse data
-- Status lifecycle: uploaded -> queued -> processing -> ready | failed
-- ==================================================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[job_descriptions]') AND type = N'U')
BEGIN
    CREATE TABLE dbo.job_descriptions (
        id UNIQUEIDENTIFIER NOT NULL PRIMARY KEY,              -- Job UUID
        user_id UNIQUEIDENTIFIER NULL,                         -- Owning user
        title NVARCHAR(255) NULL,                              -- Optional provided/derived title
        source NVARCHAR(50) NULL,                              -- upload | paste | url (extensible)
        filename NVARCHAR(512) NULL,                           -- Original filename if file-based
        mime_type NVARCHAR(100) NULL,                          -- MIME type if file-based
        storage_path NVARCHAR(1024) NULL,                      -- R2 key if file-based (NULL for pasted text)
        raw_text NVARCHAR(MAX) NULL,                           -- Extracted or directly submitted text
        status NVARCHAR(50) NOT NULL DEFAULT 'uploaded',       -- Processing status
        parsed_summary NVARCHAR(MAX) NULL,                     -- JSON/text summary generated by worker
        created_at DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),-- Insert time
        updated_at DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),-- Last update time
        CONSTRAINT FK_job_descriptions_users FOREIGN KEY (user_id) REFERENCES dbo.users(id)
    );
END;

-- =============================================================
-- Requirements: Normalized skills/requirements extracted/enriched
-- importance: weight (0-100 style) may be NULL if not scored
-- inferred: 0=explicit in posting, 1=added via enrichment (e.g. O*NET)
-- =============================================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[requirements]') AND type = N'U')
BEGIN
    CREATE TABLE dbo.requirements (
        id UNIQUEIDENTIFIER NOT NULL PRIMARY KEY,              -- Requirement UUID
        job_id UNIQUEIDENTIFIER NOT NULL,                      -- FK to job description
        skill NVARCHAR(255) NOT NULL,                          -- Skill / keyword / competency
        importance DECIMAL(5,2) NULL,                          -- Weighted importance (optional)
        inferred BIT NOT NULL DEFAULT 0,                       -- Flag indicating enrichment (1) vs explicit (0)
        created_at DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),-- Insert time
        CONSTRAINT FK_requirements_job FOREIGN KEY (job_id) REFERENCES dbo.job_descriptions(id) ON DELETE CASCADE
    );
END;

-- =============================================================
-- Candidate Skills: Extracted skills from resume parsing
-- experience_years / proficiency may be NULL if not derivable
-- =============================================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[candidate_skills]') AND type = N'U')
BEGIN
    CREATE TABLE dbo.candidate_skills (
        id UNIQUEIDENTIFIER NOT NULL PRIMARY KEY,              -- Candidate skill UUID
        resume_id UNIQUEIDENTIFIER NOT NULL,                   -- FK to resume
        skill NVARCHAR(255) NOT NULL,                          -- Skill / keyword
        experience_years INT NULL,                             -- Parsed or estimated years of experience
        proficiency DECIMAL(5,2) NULL,                         -- Normalized proficiency score (algorithm-specific)
        created_at DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),-- Insert time
        CONSTRAINT FK_candidate_skills_resume FOREIGN KEY (resume_id) REFERENCES dbo.resumes(id) ON DELETE CASCADE
    );
END;

-- =============================================================
-- Matches: Immutable (result) record of a completed match process.
-- Created when a match job finishes successfully (or failed state).
-- status: processing -> completed | failed
-- =============================================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[matches]') AND type = N'U')
BEGIN
    CREATE TABLE dbo.matches (
        id UNIQUEIDENTIFIER NOT NULL PRIMARY KEY,              -- Match result UUID
        user_id UNIQUEIDENTIFIER NULL,                         -- Owning user (duplicated for easier querying)
        resume_id UNIQUEIDENTIFIER NOT NULL,                   -- FK to resume
        job_id UNIQUEIDENTIFIER NOT NULL,                      -- FK to job description
        status NVARCHAR(50) NOT NULL DEFAULT 'processing',     -- Match computation status
        score DECIMAL(5,2) NULL,                               -- Final score (0-100 style) once completed
        summary NVARCHAR(MAX) NULL,                            -- Narrative explanation / gap analysis
        created_at DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),-- Insert time
        updated_at DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),-- Last update time
        CONSTRAINT FK_matches_users FOREIGN KEY (user_id) REFERENCES dbo.users(id),
        CONSTRAINT FK_matches_resumes FOREIGN KEY (resume_id) REFERENCES dbo.resumes(id) ON DELETE CASCADE,
        CONSTRAINT FK_matches_jobs FOREIGN KEY (job_id) REFERENCES dbo.job_descriptions(id) ON DELETE CASCADE
    );
END;

-- =====================================================================
-- Match Jobs: Operational queue entity representing a requested match.
-- status: queued -> processing -> completed | failed
-- result_id links to matches.id when a completed result exists.
-- error_message populated on failure for diagnostics.
-- =====================================================================
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[match_jobs]') AND type = N'U')
BEGIN
    CREATE TABLE dbo.match_jobs (
        id UNIQUEIDENTIFIER NOT NULL PRIMARY KEY,              -- Match job UUID
        user_id UNIQUEIDENTIFIER NULL,                         -- Owning user (for scoping/authorization)
        resume_id UNIQUEIDENTIFIER NOT NULL,                   -- FK to resume being matched
        job_id UNIQUEIDENTIFIER NOT NULL,                      -- FK to job being matched
        status NVARCHAR(50) NOT NULL DEFAULT 'queued',         -- Queue/processing status
        result_id UNIQUEIDENTIFIER NULL,                       -- FK to matches.id after completion
        error_message NVARCHAR(MAX) NULL,                      -- Failure reason (if status=failed)
        created_at DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),-- Insert time
        updated_at DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),-- Last update time
        CONSTRAINT FK_match_jobs_users FOREIGN KEY (user_id) REFERENCES dbo.users(id),
        CONSTRAINT FK_match_jobs_resumes FOREIGN KEY (resume_id) REFERENCES dbo.resumes(id) ON DELETE CASCADE,
        CONSTRAINT FK_match_jobs_jobs FOREIGN KEY (job_id) REFERENCES dbo.job_descriptions(id) ON DELETE CASCADE,
        CONSTRAINT FK_match_jobs_result FOREIGN KEY (result_id) REFERENCES dbo.matches(id)
    );
END;
